
> test
> jest httpTests/

FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts (6.084 s)
  ● Test successful question edit

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      72 |   expect(quiz.questions[0].points).toEqual(points);
      73 |   for (let answer of quiz.questions[0].answers) {
    > 74 |     expect(colours).toContain(answer.colour);
         |                     ^
      75 |     expect(answer.answerId).toEqual(expect.any(Number));
      76 |     expect(answerNames).toContain(answer.answer);
      77 |     if (answer.answer === "Queen Elizabeth") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:74:21)

  ● Test successful question edit - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      105 |   const quiz = adminQuizInfo(token, quizId);
      106 |   for (let answer of quiz.questions[0].answers) {
    > 107 |     expect(colours).toContain(answer.colour);
          |                     ^
      108 |     expect(answer.answerId).toEqual(expect.any(Number));
      109 |     expect(answerNames).toContain(answer.answer);
      110 |     if (answer.answer === "King Charles" || answer.answer === "Empress Yuchao") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:107:21)

FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - all details are correctly stored and retrieved by quiz info

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      46 |   expect(quiz.questions[0].points).toEqual(points);
      47 |   for (let answer of quiz.questions[0].answers) {
    > 48 |     expect(colours).toContain(answer.colour);
         |                     ^
      49 |     expect(answer.answerId).toEqual(expect.any(Number));
      50 |     expect(answerNames).toContain(answer.answer);
      51 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:48:21)

  ● Test successful question add - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      79 |   const quiz = adminQuizInfo(token, quizId);
      80 |   for (let answer of quiz.questions[0].answers) {
    > 81 |     expect(colours).toContain(answer.colour);
         |                     ^
      82 |     expect(answer.answerId).toEqual(expect.any(Number));
      83 |     expect(answerNames).toContain(answer.answer);
      84 |     if (answer.answer === "Prince Charles" || answer.answer === "Prince George") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:81:21)

FAIL httpTests/adminQuiz/adminQuizQuestionMove.test.ts
  ● Successful quiz question move

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      51 |   expect(quizInfo.questions[newPosition].points).toEqual(question.points);
      52 |   for (let answer of quizInfo.questions[newPosition].answers) {
    > 53 |     expect(colours).toContain(answer.colour);
         |                     ^
      54 |     expect(answer.answerId).toEqual(expect.any(Number));
      55 |     expect(answerNames).toContain(answer.answer);
      56 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:53:21)

  ● quizId invalid - quiz question move

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      80 |   adminQuizDelete(token, quizId);
      81 |   const res = adminQuizQuestionMove(token, quizId, questionId, newPosition);
    > 82 |   expect(res).toStrictEqual(400);
         |               ^
      83 | });
      84 |
      85 | test("quizId does not refer to a quiz the user owns - quiz question move", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:82:15)

PASS httpTests/adminUser/adminUserDetailsPut.test.ts
FAIL httpTests/adminQuiz/adminQuizTrashEmpty.test.ts
  ● Test quiz trash empty - quiz that the current owner doesnt own error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      49 |   const token2 = adminAuthRegister('blah2@email.com', 'password1YAY', 'hayden', 'smith').token;
      50 |   const res = adminQuizTrashEmpty(token2, quizIds);
    > 51 |   expect(res).toStrictEqual(400);
         |               ^
      52 | });
      53 |
      54 | test('Test quiz trash empty - invalid quiz error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:51:15)

  ● Test quiz trash empty - invalid quiz error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      54 | test('Test quiz trash empty - invalid quiz error', () => {
      55 |   const res = adminQuizTrashEmpty(token, "[1234321]");
    > 56 |   expect(res).toStrictEqual(400);
         |               ^
      57 | });
      58 |
      59 | test('Test quiz trash empty - single quiz not in trash error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:56:15)

  ● Test quiz trash empty - single quiz not in trash error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      60 |   const qs = `[${quizId2}]`;
      61 |   const res = adminQuizTrashEmpty(token, qs);
    > 62 |   expect(res).toStrictEqual(400);
         |               ^
      63 | });
      64 |
      65 | test('Test quiz trash empty - one quiz in trash and one quiz not in trash error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:62:15)

  ● Test quiz trash empty - one quiz in trash and one quiz not in trash error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      66 |   const qs = `[${quizId},${quizId2}]`;
      67 |   const res = adminQuizTrashEmpty(token, qs);
    > 68 |   expect(res).toStrictEqual(400);
         |               ^
      69 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:68:15)

PASS httpTests/adminAuth/adminAuthRegister.test.ts
FAIL httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
  ● quizId invalid - quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      55 |   adminQuizDelete(token, quizId);
      56 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 57 |   expect(res).toStrictEqual(400);
         |               ^
      58 | });
      59 |
      60 | test("quizId does not refer to a quiz the user owns - quiz question delete", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:57:15)

FAIL httpTests/adminQuiz/adminQuizNameUpdate.test.ts
  ● Test quiz doesnt exist to edit name error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      33 |   adminQuizDelete(token, quizId);
      34 |   const res = adminQuizNameUpdate(token, quizId, newName);
    > 35 |   expect(res).toStrictEqual(400);
         |               ^
      36 | });
      37 |
      38 | test('Test user doesnt have permission to edit quiz name error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizNameUpdate.test.ts:35:15)

PASS httpTests/adminQuiz/adminQuizRestore.test.ts
FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      50 |   expect(quiz.questions[1].points).toEqual(question.points);
      51 |   for (let answer of quiz.questions[0].answers) {
    > 52 |     expect(colours).toContain(answer.colour);
         |                     ^
      53 |     expect(answer.answerId).toEqual(expect.any(Number));
      54 |     expect(answerNames).toContain(answer.answer);
      55 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:52:21)

  ● quizId invalid - quiz question duplicate

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      64 |   adminQuizDelete(token, quizId);
      65 |   const res = adminQuizQuestionDuplicate(token, quizId, questionId);
    > 66 |   expect(res).toStrictEqual(400);
         |               ^
      67 | });
      68 |
      69 | test("quizId does not refer to a quiz the user owns - quiz question duplicate", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:66:15)

PASS httpTests/adminQuiz/adminQuizTrash.test.ts
PASS httpTests/adminUser/adminUserPassword.test.ts
FAIL httpTests/adminQuiz/adminQuizDelete.test.ts
  ● Test quiz deletion - invalid quiz error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      40 |   adminQuizDelete(token, quizId);
      41 |   const res = adminQuizDelete(token, quizId);
    > 42 |   expect(res).toStrictEqual(400);
         |               ^
      43 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizDelete.test.ts:42:15)

PASS httpTests/adminAuth/adminAuthLogout.test.ts
PASS httpTests/adminUser/adminUserDetails.test.ts
PASS httpTests/adminAuth/adminAuthLogin.test.ts
FAIL httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts
  ● Test quiz doesnt exist to edit description error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      47 |   adminQuizDelete(token, quizId);
      48 |   const res = adminQuizDescriptionUpdate(token, quizId, newDescription);
    > 49 |   expect(res).toStrictEqual(400);
         |               ^
      50 | });
      51 |
      52 | test('Test user doesnt have permission to edit quiz description error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts:49:15)

FAIL httpTests/adminQuiz/adminQuizTransfer.test.ts
  ● Test quiz transfer - invalid quiz error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      51 |   adminQuizDelete(token, quizId);
      52 |   const res = adminQuizTransfer(token, quizId, userEmail);
    > 53 |   expect(res).toStrictEqual(400);
         |               ^
      54 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTransfer.test.ts:53:15)

FAIL httpTests/adminQuiz/adminQuizInfo.test.ts
  ● Test quizId invalid error, cannot read

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "this is a quiz made by automarking", "duration": 0, "name": "test quiz", "numQuestions": 0, "questions": [], "quizId": 0, "timeCreated": 1689660720, "timeLastEdited": 1689660720}

      57 |   adminQuizDelete(token, quizId);
      58 |   const quiz = adminQuizInfo(token, quizId);
    > 59 |   expect(quiz).toStrictEqual(400);
         |                ^
      60 | });
      61 |
      62 | test('Test unauthorised quiz to read', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizInfo.test.ts:59:16)

PASS httpTests/adminQuiz/adminQuizNew.test.ts
PASS httpTests/adminQuiz/adminQuizList.test.ts
PASS httpTests/other/clear.test.ts

Summary of all failing tests
FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts (6.084 s)
  ● Test successful question edit

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      72 |   expect(quiz.questions[0].points).toEqual(points);
      73 |   for (let answer of quiz.questions[0].answers) {
    > 74 |     expect(colours).toContain(answer.colour);
         |                     ^
      75 |     expect(answer.answerId).toEqual(expect.any(Number));
      76 |     expect(answerNames).toContain(answer.answer);
      77 |     if (answer.answer === "Queen Elizabeth") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:74:21)

  ● Test successful question edit - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      105 |   const quiz = adminQuizInfo(token, quizId);
      106 |   for (let answer of quiz.questions[0].answers) {
    > 107 |     expect(colours).toContain(answer.colour);
          |                     ^
      108 |     expect(answer.answerId).toEqual(expect.any(Number));
      109 |     expect(answerNames).toContain(answer.answer);
      110 |     if (answer.answer === "King Charles" || answer.answer === "Empress Yuchao") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:107:21)

FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - all details are correctly stored and retrieved by quiz info

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      46 |   expect(quiz.questions[0].points).toEqual(points);
      47 |   for (let answer of quiz.questions[0].answers) {
    > 48 |     expect(colours).toContain(answer.colour);
         |                     ^
      49 |     expect(answer.answerId).toEqual(expect.any(Number));
      50 |     expect(answerNames).toContain(answer.answer);
      51 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:48:21)

  ● Test successful question add - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      79 |   const quiz = adminQuizInfo(token, quizId);
      80 |   for (let answer of quiz.questions[0].answers) {
    > 81 |     expect(colours).toContain(answer.colour);
         |                     ^
      82 |     expect(answer.answerId).toEqual(expect.any(Number));
      83 |     expect(answerNames).toContain(answer.answer);
      84 |     if (answer.answer === "Prince Charles" || answer.answer === "Prince George") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:81:21)

FAIL httpTests/adminQuiz/adminQuizQuestionMove.test.ts
  ● Successful quiz question move

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      51 |   expect(quizInfo.questions[newPosition].points).toEqual(question.points);
      52 |   for (let answer of quizInfo.questions[newPosition].answers) {
    > 53 |     expect(colours).toContain(answer.colour);
         |                     ^
      54 |     expect(answer.answerId).toEqual(expect.any(Number));
      55 |     expect(answerNames).toContain(answer.answer);
      56 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:53:21)

  ● quizId invalid - quiz question move

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      80 |   adminQuizDelete(token, quizId);
      81 |   const res = adminQuizQuestionMove(token, quizId, questionId, newPosition);
    > 82 |   expect(res).toStrictEqual(400);
         |               ^
      83 | });
      84 |
      85 | test("quizId does not refer to a quiz the user owns - quiz question move", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:82:15)

FAIL httpTests/adminQuiz/adminQuizTrashEmpty.test.ts
  ● Test quiz trash empty - quiz that the current owner doesnt own error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      49 |   const token2 = adminAuthRegister('blah2@email.com', 'password1YAY', 'hayden', 'smith').token;
      50 |   const res = adminQuizTrashEmpty(token2, quizIds);
    > 51 |   expect(res).toStrictEqual(400);
         |               ^
      52 | });
      53 |
      54 | test('Test quiz trash empty - invalid quiz error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:51:15)

  ● Test quiz trash empty - invalid quiz error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      54 | test('Test quiz trash empty - invalid quiz error', () => {
      55 |   const res = adminQuizTrashEmpty(token, "[1234321]");
    > 56 |   expect(res).toStrictEqual(400);
         |               ^
      57 | });
      58 |
      59 | test('Test quiz trash empty - single quiz not in trash error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:56:15)

  ● Test quiz trash empty - single quiz not in trash error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      60 |   const qs = `[${quizId2}]`;
      61 |   const res = adminQuizTrashEmpty(token, qs);
    > 62 |   expect(res).toStrictEqual(400);
         |               ^
      63 | });
      64 |
      65 | test('Test quiz trash empty - one quiz in trash and one quiz not in trash error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:62:15)

  ● Test quiz trash empty - one quiz in trash and one quiz not in trash error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      66 |   const qs = `[${quizId},${quizId2}]`;
      67 |   const res = adminQuizTrashEmpty(token, qs);
    > 68 |   expect(res).toStrictEqual(400);
         |               ^
      69 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTrashEmpty.test.ts:68:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
  ● quizId invalid - quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      55 |   adminQuizDelete(token, quizId);
      56 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 57 |   expect(res).toStrictEqual(400);
         |               ^
      58 | });
      59 |
      60 | test("quizId does not refer to a quiz the user owns - quiz question delete", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:57:15)

FAIL httpTests/adminQuiz/adminQuizNameUpdate.test.ts
  ● Test quiz doesnt exist to edit name error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      33 |   adminQuizDelete(token, quizId);
      34 |   const res = adminQuizNameUpdate(token, quizId, newName);
    > 35 |   expect(res).toStrictEqual(400);
         |               ^
      36 | });
      37 |
      38 | test('Test user doesnt have permission to edit quiz name error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizNameUpdate.test.ts:35:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      50 |   expect(quiz.questions[1].points).toEqual(question.points);
      51 |   for (let answer of quiz.questions[0].answers) {
    > 52 |     expect(colours).toContain(answer.colour);
         |                     ^
      53 |     expect(answer.answerId).toEqual(expect.any(Number));
      54 |     expect(answerNames).toContain(answer.answer);
      55 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:52:21)

  ● quizId invalid - quiz question duplicate

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      64 |   adminQuizDelete(token, quizId);
      65 |   const res = adminQuizQuestionDuplicate(token, quizId, questionId);
    > 66 |   expect(res).toStrictEqual(400);
         |               ^
      67 | });
      68 |
      69 | test("quizId does not refer to a quiz the user owns - quiz question duplicate", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:66:15)

FAIL httpTests/adminQuiz/adminQuizDelete.test.ts
  ● Test quiz deletion - invalid quiz error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      40 |   adminQuizDelete(token, quizId);
      41 |   const res = adminQuizDelete(token, quizId);
    > 42 |   expect(res).toStrictEqual(400);
         |               ^
      43 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizDelete.test.ts:42:15)

FAIL httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts
  ● Test quiz doesnt exist to edit description error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      47 |   adminQuizDelete(token, quizId);
      48 |   const res = adminQuizDescriptionUpdate(token, quizId, newDescription);
    > 49 |   expect(res).toStrictEqual(400);
         |               ^
      50 | });
      51 |
      52 | test('Test user doesnt have permission to edit quiz description error', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts:49:15)

FAIL httpTests/adminQuiz/adminQuizTransfer.test.ts
  ● Test quiz transfer - invalid quiz error

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      51 |   adminQuizDelete(token, quizId);
      52 |   const res = adminQuizTransfer(token, quizId, userEmail);
    > 53 |   expect(res).toStrictEqual(400);
         |               ^
      54 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTransfer.test.ts:53:15)

FAIL httpTests/adminQuiz/adminQuizInfo.test.ts
  ● Test quizId invalid error, cannot read

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "this is a quiz made by automarking", "duration": 0, "name": "test quiz", "numQuestions": 0, "questions": [], "quizId": 0, "timeCreated": 1689660720, "timeLastEdited": 1689660720}

      57 |   adminQuizDelete(token, quizId);
      58 |   const quiz = adminQuizInfo(token, quizId);
    > 59 |   expect(quiz).toStrictEqual(400);
         |                ^
      60 | });
      61 |
      62 | test('Test unauthorised quiz to read', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizInfo.test.ts:59:16)


Test Suites: 11 failed, 11 passed, 22 total
Tests:       18 failed, 141 passed, 159 total
Snapshots:   0 total
Time:        39.608 s, estimated 41 s
Ran all test suites matching /httpTests\//i.
npm notice 
npm notice New minor version of npm available! 9.5.1 -> 9.8.0
npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.8.0>
npm notice Run `npm install -g npm@9.8.0` to update!
npm notice 
