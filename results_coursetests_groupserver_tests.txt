
> test
> jest httpTests/

PASS httpTests/adminQuizSession/adminQuizSessionProgress.test.ts (16.555 s)
FAIL httpTests/player/playerQuestionAnswer.test.ts (6.338 s)
  ● Test successful question answer for two players


          Curl request failed with code 3
          Please look up libcurl error code!
            - https://curl.se/libcurl/c/libcurl-errors.html

          DEBUG: {
            method: "PUT",
            url: "http://127.0.0.1:48237/v1/player/[object Object]/question/1/answer",
            options: {"qs":{},"json":{"answerIds":[{"answerId":0,"answer":"Prince Charles","correct":true,"colour":"orange"}]},"headers":{}}
          }

      17 |   }
      18 |
    > 19 |   const res = request(method, path, { qs, json, headers } );
         |                      ^
      20 |
      21 |   if (res.statusCode !== 200) {
      22 |     // Return error code number instead of object in case of error.

          
      at request (../node_modules/sync-request-curl/src/request.ts:60:11)
      at requestHelper (httpTests/fakepi/helpers.ts:19:22)
      at playerQuestionAnswer (httpTests/fakepi/player.ts:29:23)
      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:90:23)

PASS httpTests/player/playerStatus.test.ts (5.586 s)
FAIL httpTests/player/playerQuestionResults.test.ts
  ● Successful particular question results for players - single player single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 6

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "answerId": 1,
    +       "playersCorrect": Array [],
    +     },
    +     Object {
    +       "answerId": 1,
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

       95 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
       96 |   const res = playerQuestionResults(playerId, 1);
    >  97 |   expect(res).toStrictEqual({
          |               ^
       98 |     questionId: questionId1,
       99 |     questionCorrectBreakdown: [
      100 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:97:15)

  ● Successful particular question results for players - two players single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 6

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "answerId": 1,
    +       "playersCorrect": Array [],
    +     },
    +     Object {
    +       "answerId": 1,
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

      126 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      127 |   const res = playerQuestionResults(playerId2, 1);
    > 128 |   expect(res).toStrictEqual({
          |               ^
      129 |     questionId: questionId1,
      130 |     questionCorrectBreakdown: [
      131 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:128:15)

  ● Successful particular question results for players - single player multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -1,11 +1,11 @@
      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    +       "answerId": 1,
            "playersCorrect": Array [
              "Hayden Smith",
            ],
          },
          Object {

      171 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      172 |   const res = playerQuestionResults(playerId, 2);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     questionId: questionId2,
      175 |     questionCorrectBreakdown: [
      176 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:173:15)

  ● Successful particular question results for players - two players multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -1,11 +1,11 @@
      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    +       "answerId": 1,
            "playersCorrect": Array [
              "Hayden Smith",
              "Yuchao",
            ],
          },

      222 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      223 |   const res = playerQuestionResults(playerId2, 2);
    > 224 |   expect(res).toStrictEqual({
          |               ^
      225 |     questionId: questionId2,
      226 |     questionCorrectBreakdown: [
      227 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:224:15)

FAIL httpTests/player/playerQuestionData.test.ts (6.066 s)
  ● Successful question information for player - question edit has no impact

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

    @@ -19,11 +19,11 @@
            "answer": "Prince William",
            "answerId": 3,
            "colour": "green",
          },
        ],
    -   "duration": 3,
    +   "duration": 4,
        "points": 5,
    -   "question": "What came first, the chicken or the egg?",
    +   "question": "Who is the Monarch of England?",
        "questionId": 0,
        "thumbnailUrl": Any<String>,
      }

      176 |     })
      177 |   };
    > 178 |   expect(res).toStrictEqual({
          |               ^
      179 |     questionId: questionId1,
      180 |     question: editedQuestion.question,
      181 |     duration: editedQuestion.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:178:15)

FAIL httpTests/player/playerResults.test.ts
  ● Successful final results for whole session - player 1

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 7

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                ],
              },
              Object {

      107 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      108 |   const res = playerResults(playerId);
    > 109 |   expect(res).toStrictEqual({
          |               ^
      110 |     usersRankedByScore: [
      111 |       {
      112 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:109:15)

  ● Successful final results for whole session - player 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 6
    + Received  + 8

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                  "Yuchao",
                ],
              },
    @@ -40,9 +42,9 @@
            "name": "Hayden Smith",
            "score": 10,
          },
          Object {
            "name": "Yuchao",
    -       "score": 2.5,
    +       "score": 5,
          },
        ],
      }

      186 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      187 |   const res = playerResults(playerId2);
    > 188 |   expect(res).toStrictEqual({
          |               ^
      189 |     usersRankedByScore: [
      190 |       {
      191 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:188:15)

FAIL httpTests/adminQuizSession/adminQuizSessionStatus.test.ts
  ● Test successful session status, before quiz in progress

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "yellow",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "red",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      104 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      105 |   const quizInfo = adminQuizInfo(token, quizId);
    > 106 |   expect(res).toStrictEqual({
          |               ^
      107 |     "state": "LOBBY",
      108 |     "atQuestion": 0,
      109 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:106:15)

  ● Test successful session status, quiz in progress, question 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "green",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      125 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      126 |   const quizInfo = adminQuizInfo(token, quizId);
    > 127 |   expect(res).toStrictEqual({
          |               ^
      128 |     "state": "QUESTION_COUNTDOWN",
      129 |     "atQuestion": 2,
      130 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:127:15)

  ● Test successful session status, single quiz ended

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "purple",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "brown",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      155 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      156 |   const quizInfo = adminQuizInfo(token, quizId);
    > 157 |   expect(res).toStrictEqual({
          |               ^
      158 |     "state": "END",
      159 |     "atQuestion": 0,
      160 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:157:15)

  ● Test successful session status, single quiz in final results

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "green",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      183 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      184 |   const quizInfo = adminQuizInfo(token, quizId);
    > 185 |   expect(res).toStrictEqual({
          |               ^
      186 |     "state": "FINAL_RESULTS",
      187 |     "atQuestion": 0,
      188 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:185:15)

  ● Test successful session status with new session created during during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "purple",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "green",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      227 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      228 |   const quizInfo = adminQuizInfo(token, quizId);
    > 229 |   expect(res).toStrictEqual({
          |               ^
      230 |     "state": "LOBBY",
      231 |     "atQuestion": 0,
      232 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:229:15)

  ● Test successful session status with question edit during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 10
    + Received  + 22

    @@ -7,33 +7,42 @@
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [
                Object {
    -             "answer": "Chicken",
    +             "answer": "Prince Charles",
                  "answerId": 0,
    -             "colour": "purple",
    -             "correct": false,
    +             "colour": "yellow",
    +             "correct": true,
                },
                Object {
    -             "answer": "Egg",
    +             "answer": "Prince George",
                  "answerId": 1,
    -             "colour": "yellow",
    +             "colour": "purple",
                  "correct": false,
                },
                Object {
    -             "answer": "Who knows",
    +             "answer": "Princess Charlotte",
                  "answerId": 2,
    +             "colour": "red",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Prince William",
    +             "answerId": 3,
                  "colour": "blue",
    -             "correct": true,
    +             "correct": false,
                },
              ],
    -         "duration": 3,
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
    +         "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
    -         "question": "What came first, the chicken or the egg?",
    +         "question": "Who is the Monarch of England?",
              "questionId": 0,
    -         "thumbnailUrl": "http://localhost:48237/static/2.jpg",
    +         "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
            Object {
              "answers": Array [
                Object {
                  "answer": "Prince Tam",
    @@ -58,11 +67,14 @@
                  "answerId": 3,
                  "colour": "yellow",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      244 |   expect(res.metadata.timeLastEdited).toBe(editTime);
      245 |   const quizInfo = adminQuizInfo(token, quizId);
    > 246 |   expect(res).toStrictEqual({
          |               ^
      247 |     "state": "LOBBY",
      248 |     "atQuestion": 0,
      249 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:246:15)

  ● Test successful session status with question delete during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  -  1
    + Received  + 40

    @@ -2,15 +2,51 @@
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 8,
          "name": "test quiz",
    -     "numQuestions": 1,
    +     "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [
    +           Object {
    +             "answer": "Prince Charles",
    +             "answerId": 0,
    +             "colour": "yellow",
    +             "correct": true,
    +           },
    +           Object {
    +             "answer": "Prince George",
    +             "answerId": 1,
    +             "colour": "green",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Princess Charlotte",
    +             "answerId": 2,
    +             "colour": "orange",
    +             "correct": false,
    +           },
                Object {
    +             "answer": "Prince William",
    +             "answerId": 3,
    +             "colour": "green",
    +             "correct": false,
    +           },
    +         ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
    +         "duration": 4,
    +         "percentCorrect": 0,
    +         "points": 5,
    +         "question": "Who is the Monarch of England?",
    +         "questionId": 0,
    +         "thumbnailUrl": "http://localhost:48237/static/0.jpg",
    +       },
    +       Object {
    +         "answers": Array [
    +           Object {
                  "answer": "Prince Tam",
                  "answerId": 0,
                  "colour": "orange",
                  "correct": false,
                },
    @@ -31,11 +67,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      256 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      257 |   const quizInfo = adminQuizInfo(token, quizId);
    > 258 |   expect(res).toStrictEqual({
          |               ^
      259 |     "state": "LOBBY",
      260 |     "atQuestion": 0,
      261 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:258:15)

  ● Test successful session status with question add during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "purple",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      269 |   adminQuizQuestionAdd(token, quizId, editedQuestion);
      270 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
    > 271 |   expect(res).toStrictEqual({
          |               ^
      272 |     "state": "LOBBY",
      273 |     "atQuestion": 0,
      274 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:271:15)

FAIL httpTests/adminQuizSession/adminQuizSessionResults.test.ts
  ● Console

    console.log
      [ 0, 1 ]

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:95:11)

  ● Successful final results for whole session - admin with one player

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 7

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                ],
              },
              Object {

       99 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      100 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 101 |   expect(res).toStrictEqual({
          |               ^
      102 |     usersRankedByScore: [
      103 |       {
      104 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:101:15)

  ● Successful final results for whole session - admin with 2 players

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 7
    + Received  + 9

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                  "Yuchao",
                ],
              },
    @@ -36,13 +38,13 @@
          },
        ],
        "usersRankedByScore": Array [
          Object {
            "name": "Hayden Smith",
    -       "score": 10,
    +       "score": 15,
          },
          Object {
            "name": "Yuchao",
    -       "score": 2.5,
    +       "score": 0,
          },
        ],
      }

      171 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      172 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     usersRankedByScore: [
      175 |       {
      176 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:173:15)

PASS httpTests/adminQuiz/adminQuizQUestionEdit.test.ts
PASS httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
FAIL httpTests/adminQuizSession/adminQuizSessionStart.test.ts
  ● Test quizId invalid error, cannot start session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "Second quiz description", "duration": 4, "name": "Second quiz", "numQuestions": 1, "questions": [{"answers": [{"answer": "Prince Charles", "answerId": 0, "colour": "brown", "correct": true}, {"answer": "Prince George", "answerId": 1, "colour": "red", "correct": false}, {"answer": "Princess Charlotte", "answerId": 2, "colour": "orange", "correct": false}, {"answer": "Prince William", "answerId": 3, "colour": "brown", "correct": false}], "duration": 4, "points": 5, "question": "Who is the Monarch of England?", "questionId": 0, "thumbnailUrl": "http://localhost:48237/static/1.jpg"}], "quizId": 1, "thumbnailUrl": "", "timeCreated": 1691802748, "timeLastEdited": 1691802748}

      80 | iter3test('Test quizId invalid error, cannot start session', () => {
      81 |   const quiz = adminQuizInfo(token, quizId+1);
    > 82 |   expect(quiz).toStrictEqual(400);
         |                ^
      83 | });
      84 |
      85 | iter3test('Test unauthorised quiz to start session', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:82:16)

FAIL httpTests/player/playerPostChat.test.ts
  ● Successful for one message, same player - chat post

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      59 |   expect(res).toStrictEqual({});
      60 |   const message = playerGetChat(playerId);
    > 61 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      62 |     messageBody,
      63 |     playerId,
      64 |     playerName,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:61:31)

  ● Successful for multiple messages, same player, same body - chat post

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      75 |   expect(msg2).toStrictEqual({});
      76 |   const message = playerGetChat(playerId);
    > 77 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      78 |     messageBody,
      79 |     playerId,
      80 |     playerName,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:77:31)

  ● Successful for multiple messages, different players - chat post

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

       99 |   expect(msg2).toStrictEqual({});
      100 |   const message = playerGetChat(playerId);
    > 101 |   expect(message.messages[0]).toStrictEqual({
          |                               ^
      102 |     messageBody,
      103 |     playerId,
      104 |     playerName,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:101:31)

  ● messageBody less than 1 character - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: {}

      121 | iter3test('messageBody less than 1 character - chat post', () => {
      122 |   const res = playerPostChat(playerId, '');
    > 123 |   expect(res).toBe(400);
          |               ^
      124 | });
      125 |
      126 | iter3test('messageBody more than 100 characters - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:123:15)

  ● messageBody more than 100 characters - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: {}

      126 | iter3test('messageBody more than 100 characters - chat post', () => {
      127 |   const res = playerPostChat(playerId, 'a'.repeat(101));
    > 128 |   expect(res).toBe(400);
          |               ^
      129 | });
      130 |
      131 | iter3test('Invalid messageBody after a valid one - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:128:15)

  ● Invalid messageBody after a valid one - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: {}

      133 |   const timestamp = Math.round(Date.now() / 1000);
      134 |   const res = playerPostChat(playerId, '');
    > 135 |   expect(res).toBe(400);
          |               ^
      136 |   const message = playerGetChat(playerId);
      137 |   expect(message.messages.length).toBe(1);
      138 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:135:15)

PASS httpTests/adminUser/adminUserDetailsPut.test.ts
PASS httpTests/adminQuiz/adminQuizQuestionMove.test.ts
PASS httpTests/adminQuiz/adminQuizTrashEmpty.test.ts
PASS httpTests/adminAuth/adminAuthRegister.test.ts
PASS httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
FAIL httpTests/player/playerGetChat.test.ts
  ● Successful get chat - conversation fetched by player 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      61 |   const timestamp = Math.round(Date.now() / 1000);
      62 |   const message = playerGetChat(playerId2);
    > 63 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      64 |     messageBody,
      65 |     playerId: playerId1,
      66 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:63:31)

  ● Messages from other sessions player isnt in arent returned - chat get for playerId1

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      83 |   const timestamp = Math.round(Date.now() / 1000);
      84 |   const message = playerGetChat(playerId1);
    > 85 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      86 |     messageBody,
      87 |     playerId: playerId1,
      88 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:85:31)

PASS httpTests/adminQuiz/adminQuizTrash.test.ts
PASS httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
PASS httpTests/adminQuiz/adminQuizNew.test.ts
FAIL httpTests/adminQuiz/adminQuizThumbnail.test.ts
  ● Test unsuccessful quiz thumnail change - invalid imgUrl, non JPEG 

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      40 |   const badImgUrl = 'http://media.giphy.com/media/EBJQRG6M99zSNhnhsW/giphy.gif';
      41 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 42 |   expect(res).toStrictEqual(400);
         |               ^
      43 | });
      44 |
      45 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:42:15)

  ● Test unsuccessful quiz thumnail change - invalid imgUrl, 404 not found

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      55 |   const badImgUrl = 'http://webcms3.cse.unsw.edu.au/static/uploads/coursepic/COMP1531/23T2/031145bd3ec1252213d78dc10cf897e5f779b358722a45f0a98eed7d0d5201b3/blah.png';
      56 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 57 |   expect(res).toStrictEqual(400);
         |               ^
      58 | });
      59 |
      60 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:57:15)

PASS httpTests/adminUser/adminUserPassword.test.ts
PASS httpTests/adminUser/adminUserDetails.test.ts
PASS httpTests/adminAuth/adminAuthLogin.test.ts
PASS httpTests/adminQuiz/adminQuizNameUpdate.test.ts
PASS httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts
PASS httpTests/adminQuiz/adminQuizTransfer.test.ts
PASS httpTests/adminQuiz/adminQuizRestore.test.ts
PASS httpTests/player/playerJoin.test.ts
FAIL httpTests/adminAuth/adminAuthLogout.test.ts
  ● token is for a user who has already logged out

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      30 |   adminAuthLogout(token);
      31 |   const res = adminAuthLogout(token);
    > 32 |   expect(res).toStrictEqual(400);
         |               ^
      33 | });
      34 |
      35 | test('Cant perform action after logout', () => {

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogout.test.ts:32:15)

PASS httpTests/adminQuiz/adminQuizList.test.ts
PASS httpTests/adminQuiz/adminQuizInfo.test.ts
PASS httpTests/adminQuiz/adminQuizDelete.test.ts
PASS httpTests/other/clear.test.ts

Summary of all failing tests
FAIL httpTests/player/playerQuestionAnswer.test.ts (6.338 s)
  ● Test successful question answer for two players


          Curl request failed with code 3
          Please look up libcurl error code!
            - https://curl.se/libcurl/c/libcurl-errors.html

          DEBUG: {
            method: "PUT",
            url: "http://127.0.0.1:48237/v1/player/[object Object]/question/1/answer",
            options: {"qs":{},"json":{"answerIds":[{"answerId":0,"answer":"Prince Charles","correct":true,"colour":"orange"}]},"headers":{}}
          }

      17 |   }
      18 |
    > 19 |   const res = request(method, path, { qs, json, headers } );
         |                      ^
      20 |
      21 |   if (res.statusCode !== 200) {
      22 |     // Return error code number instead of object in case of error.

          
      at request (../node_modules/sync-request-curl/src/request.ts:60:11)
      at requestHelper (httpTests/fakepi/helpers.ts:19:22)
      at playerQuestionAnswer (httpTests/fakepi/player.ts:29:23)
      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:90:23)

FAIL httpTests/player/playerQuestionResults.test.ts
  ● Successful particular question results for players - single player single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 6

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "answerId": 1,
    +       "playersCorrect": Array [],
    +     },
    +     Object {
    +       "answerId": 1,
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

       95 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
       96 |   const res = playerQuestionResults(playerId, 1);
    >  97 |   expect(res).toStrictEqual({
          |               ^
       98 |     questionId: questionId1,
       99 |     questionCorrectBreakdown: [
      100 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:97:15)

  ● Successful particular question results for players - two players single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 6

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "answerId": 1,
    +       "playersCorrect": Array [],
    +     },
    +     Object {
    +       "answerId": 1,
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

      126 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      127 |   const res = playerQuestionResults(playerId2, 1);
    > 128 |   expect(res).toStrictEqual({
          |               ^
      129 |     questionId: questionId1,
      130 |     questionCorrectBreakdown: [
      131 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:128:15)

  ● Successful particular question results for players - single player multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -1,11 +1,11 @@
      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    +       "answerId": 1,
            "playersCorrect": Array [
              "Hayden Smith",
            ],
          },
          Object {

      171 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      172 |   const res = playerQuestionResults(playerId, 2);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     questionId: questionId2,
      175 |     questionCorrectBreakdown: [
      176 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:173:15)

  ● Successful particular question results for players - two players multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    @@ -1,11 +1,11 @@
      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": 0,
    +       "answerId": 1,
            "playersCorrect": Array [
              "Hayden Smith",
              "Yuchao",
            ],
          },

      222 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      223 |   const res = playerQuestionResults(playerId2, 2);
    > 224 |   expect(res).toStrictEqual({
          |               ^
      225 |     questionId: questionId2,
      226 |     questionCorrectBreakdown: [
      227 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:224:15)

FAIL httpTests/player/playerQuestionData.test.ts (6.066 s)
  ● Successful question information for player - question edit has no impact

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

    @@ -19,11 +19,11 @@
            "answer": "Prince William",
            "answerId": 3,
            "colour": "green",
          },
        ],
    -   "duration": 3,
    +   "duration": 4,
        "points": 5,
    -   "question": "What came first, the chicken or the egg?",
    +   "question": "Who is the Monarch of England?",
        "questionId": 0,
        "thumbnailUrl": Any<String>,
      }

      176 |     })
      177 |   };
    > 178 |   expect(res).toStrictEqual({
          |               ^
      179 |     questionId: questionId1,
      180 |     question: editedQuestion.question,
      181 |     duration: editedQuestion.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:178:15)

FAIL httpTests/player/playerResults.test.ts
  ● Successful final results for whole session - player 1

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 7

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                ],
              },
              Object {

      107 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      108 |   const res = playerResults(playerId);
    > 109 |   expect(res).toStrictEqual({
          |               ^
      110 |     usersRankedByScore: [
      111 |       {
      112 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:109:15)

  ● Successful final results for whole session - player 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 6
    + Received  + 8

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                  "Yuchao",
                ],
              },
    @@ -40,9 +42,9 @@
            "name": "Hayden Smith",
            "score": 10,
          },
          Object {
            "name": "Yuchao",
    -       "score": 2.5,
    +       "score": 5,
          },
        ],
      }

      186 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      187 |   const res = playerResults(playerId2);
    > 188 |   expect(res).toStrictEqual({
          |               ^
      189 |     usersRankedByScore: [
      190 |       {
      191 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:188:15)

FAIL httpTests/adminQuizSession/adminQuizSessionStatus.test.ts
  ● Test successful session status, before quiz in progress

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "yellow",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "red",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      104 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      105 |   const quizInfo = adminQuizInfo(token, quizId);
    > 106 |   expect(res).toStrictEqual({
          |               ^
      107 |     "state": "LOBBY",
      108 |     "atQuestion": 0,
      109 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:106:15)

  ● Test successful session status, quiz in progress, question 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "green",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      125 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      126 |   const quizInfo = adminQuizInfo(token, quizId);
    > 127 |   expect(res).toStrictEqual({
          |               ^
      128 |     "state": "QUESTION_COUNTDOWN",
      129 |     "atQuestion": 2,
      130 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:127:15)

  ● Test successful session status, single quiz ended

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "purple",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "brown",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      155 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      156 |   const quizInfo = adminQuizInfo(token, quizId);
    > 157 |   expect(res).toStrictEqual({
          |               ^
      158 |     "state": "END",
      159 |     "atQuestion": 0,
      160 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:157:15)

  ● Test successful session status, single quiz in final results

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "green",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      183 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      184 |   const quizInfo = adminQuizInfo(token, quizId);
    > 185 |   expect(res).toStrictEqual({
          |               ^
      186 |     "state": "FINAL_RESULTS",
      187 |     "atQuestion": 0,
      188 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:185:15)

  ● Test successful session status with new session created during during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "purple",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "green",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      227 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      228 |   const quizInfo = adminQuizInfo(token, quizId);
    > 229 |   expect(res).toStrictEqual({
          |               ^
      230 |     "state": "LOBBY",
      231 |     "atQuestion": 0,
      232 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:229:15)

  ● Test successful session status with question edit during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 10
    + Received  + 22

    @@ -7,33 +7,42 @@
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [
                Object {
    -             "answer": "Chicken",
    +             "answer": "Prince Charles",
                  "answerId": 0,
    -             "colour": "purple",
    -             "correct": false,
    +             "colour": "yellow",
    +             "correct": true,
                },
                Object {
    -             "answer": "Egg",
    +             "answer": "Prince George",
                  "answerId": 1,
    -             "colour": "yellow",
    +             "colour": "purple",
                  "correct": false,
                },
                Object {
    -             "answer": "Who knows",
    +             "answer": "Princess Charlotte",
                  "answerId": 2,
    +             "colour": "red",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Prince William",
    +             "answerId": 3,
                  "colour": "blue",
    -             "correct": true,
    +             "correct": false,
                },
              ],
    -         "duration": 3,
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
    +         "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
    -         "question": "What came first, the chicken or the egg?",
    +         "question": "Who is the Monarch of England?",
              "questionId": 0,
    -         "thumbnailUrl": "http://localhost:48237/static/2.jpg",
    +         "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
            Object {
              "answers": Array [
                Object {
                  "answer": "Prince Tam",
    @@ -58,11 +67,14 @@
                  "answerId": 3,
                  "colour": "yellow",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      244 |   expect(res.metadata.timeLastEdited).toBe(editTime);
      245 |   const quizInfo = adminQuizInfo(token, quizId);
    > 246 |   expect(res).toStrictEqual({
          |               ^
      247 |     "state": "LOBBY",
      248 |     "atQuestion": 0,
      249 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:246:15)

  ● Test successful session status with question delete during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  -  1
    + Received  + 40

    @@ -2,15 +2,51 @@
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 8,
          "name": "test quiz",
    -     "numQuestions": 1,
    +     "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [
    +           Object {
    +             "answer": "Prince Charles",
    +             "answerId": 0,
    +             "colour": "yellow",
    +             "correct": true,
    +           },
    +           Object {
    +             "answer": "Prince George",
    +             "answerId": 1,
    +             "colour": "green",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Princess Charlotte",
    +             "answerId": 2,
    +             "colour": "orange",
    +             "correct": false,
    +           },
                Object {
    +             "answer": "Prince William",
    +             "answerId": 3,
    +             "colour": "green",
    +             "correct": false,
    +           },
    +         ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
    +         "duration": 4,
    +         "percentCorrect": 0,
    +         "points": 5,
    +         "question": "Who is the Monarch of England?",
    +         "questionId": 0,
    +         "thumbnailUrl": "http://localhost:48237/static/0.jpg",
    +       },
    +       Object {
    +         "answers": Array [
    +           Object {
                  "answer": "Prince Tam",
                  "answerId": 0,
                  "colour": "orange",
                  "correct": false,
                },
    @@ -31,11 +67,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      256 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      257 |   const quizInfo = adminQuizInfo(token, quizId);
    > 258 |   expect(res).toStrictEqual({
          |               ^
      259 |     "state": "LOBBY",
      260 |     "atQuestion": 0,
      261 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:258:15)

  ● Test successful session status with question add during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 6

    @@ -31,11 +31,14 @@
                  "answerId": 3,
                  "colour": "blue",
                  "correct": false,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of England?",
              "questionId": 0,
              "thumbnailUrl": "http://localhost:48237/static/0.jpg",
            },
    @@ -64,11 +67,14 @@
                  "answerId": 3,
                  "colour": "purple",
                  "correct": true,
                },
              ],
    +         "attempts": Array [],
    +         "averageAnswerTime": 0,
              "duration": 4,
    +         "percentCorrect": 0,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
              "thumbnailUrl": "http://localhost:48237/static/1.jpg",
            },

      269 |   adminQuizQuestionAdd(token, quizId, editedQuestion);
      270 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
    > 271 |   expect(res).toStrictEqual({
          |               ^
      272 |     "state": "LOBBY",
      273 |     "atQuestion": 0,
      274 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:271:15)

FAIL httpTests/adminQuizSession/adminQuizSessionResults.test.ts
  ● Successful final results for whole session - admin with one player

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 7

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                ],
              },
              Object {

       99 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      100 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 101 |   expect(res).toStrictEqual({
          |               ^
      102 |     usersRankedByScore: [
      103 |       {
      104 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:101:15)

  ● Successful final results for whole session - admin with 2 players

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 7
    + Received  + 9

    @@ -3,24 +3,26 @@
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    -           "playersCorrect": Array [
    -             "Hayden Smith",
    -           ],
    +           "answerId": 1,
    +           "playersCorrect": Array [],
    +         },
    +         Object {
    +           "answerId": 1,
    +           "playersCorrect": Array [],
              },
            ],
            "questionId": 0,
          },
          Object {
            "averageAnswerTime": Any<Number>,
            "percentCorrect": Any<Number>,
            "questionCorrectBreakdown": Array [
              Object {
    -           "answerId": 0,
    +           "answerId": 1,
                "playersCorrect": Array [
                  "Hayden Smith",
                  "Yuchao",
                ],
              },
    @@ -36,13 +38,13 @@
          },
        ],
        "usersRankedByScore": Array [
          Object {
            "name": "Hayden Smith",
    -       "score": 10,
    +       "score": 15,
          },
          Object {
            "name": "Yuchao",
    -       "score": 2.5,
    +       "score": 0,
          },
        ],
      }

      171 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      172 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     usersRankedByScore: [
      175 |       {
      176 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:173:15)

FAIL httpTests/adminQuizSession/adminQuizSessionStart.test.ts
  ● Test quizId invalid error, cannot start session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "Second quiz description", "duration": 4, "name": "Second quiz", "numQuestions": 1, "questions": [{"answers": [{"answer": "Prince Charles", "answerId": 0, "colour": "brown", "correct": true}, {"answer": "Prince George", "answerId": 1, "colour": "red", "correct": false}, {"answer": "Princess Charlotte", "answerId": 2, "colour": "orange", "correct": false}, {"answer": "Prince William", "answerId": 3, "colour": "brown", "correct": false}], "duration": 4, "points": 5, "question": "Who is the Monarch of England?", "questionId": 0, "thumbnailUrl": "http://localhost:48237/static/1.jpg"}], "quizId": 1, "thumbnailUrl": "", "timeCreated": 1691802748, "timeLastEdited": 1691802748}

      80 | iter3test('Test quizId invalid error, cannot start session', () => {
      81 |   const quiz = adminQuizInfo(token, quizId+1);
    > 82 |   expect(quiz).toStrictEqual(400);
         |                ^
      83 | });
      84 |
      85 | iter3test('Test unauthorised quiz to start session', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:82:16)

FAIL httpTests/player/playerPostChat.test.ts
  ● Successful for one message, same player - chat post

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      59 |   expect(res).toStrictEqual({});
      60 |   const message = playerGetChat(playerId);
    > 61 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      62 |     messageBody,
      63 |     playerId,
      64 |     playerName,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:61:31)

  ● Successful for multiple messages, same player, same body - chat post

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      75 |   expect(msg2).toStrictEqual({});
      76 |   const message = playerGetChat(playerId);
    > 77 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      78 |     messageBody,
      79 |     playerId,
      80 |     playerName,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:77:31)

  ● Successful for multiple messages, different players - chat post

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

       99 |   expect(msg2).toStrictEqual({});
      100 |   const message = playerGetChat(playerId);
    > 101 |   expect(message.messages[0]).toStrictEqual({
          |                               ^
      102 |     messageBody,
      103 |     playerId,
      104 |     playerName,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:101:31)

  ● messageBody less than 1 character - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: {}

      121 | iter3test('messageBody less than 1 character - chat post', () => {
      122 |   const res = playerPostChat(playerId, '');
    > 123 |   expect(res).toBe(400);
          |               ^
      124 | });
      125 |
      126 | iter3test('messageBody more than 100 characters - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:123:15)

  ● messageBody more than 100 characters - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: {}

      126 | iter3test('messageBody more than 100 characters - chat post', () => {
      127 |   const res = playerPostChat(playerId, 'a'.repeat(101));
    > 128 |   expect(res).toBe(400);
          |               ^
      129 | });
      130 |
      131 | iter3test('Invalid messageBody after a valid one - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:128:15)

  ● Invalid messageBody after a valid one - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: {}

      133 |   const timestamp = Math.round(Date.now() / 1000);
      134 |   const res = playerPostChat(playerId, '');
    > 135 |   expect(res).toBe(400);
          |               ^
      136 |   const message = playerGetChat(playerId);
      137 |   expect(message.messages.length).toBe(1);
      138 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:135:15)

FAIL httpTests/player/playerGetChat.test.ts
  ● Successful get chat - conversation fetched by player 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      61 |   const timestamp = Math.round(Date.now() / 1000);
      62 |   const message = playerGetChat(playerId2);
    > 63 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      64 |     messageBody,
      65 |     playerId: playerId1,
      66 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:63:31)

  ● Messages from other sessions player isnt in arent returned - chat get for playerId1

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 2

      Object {
    +   "messageBody": Object {
          "messageBody": "I am Tahook-ed on this game",
    +   },
        "playerId": 1,
        "playerName": "Hayden Smith",
        "timeSent": Any<Number>,
      }

      83 |   const timestamp = Math.round(Date.now() / 1000);
      84 |   const message = playerGetChat(playerId1);
    > 85 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      86 |     messageBody,
      87 |     playerId: playerId1,
      88 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:85:31)

FAIL httpTests/adminQuiz/adminQuizThumbnail.test.ts
  ● Test unsuccessful quiz thumnail change - invalid imgUrl, non JPEG 

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      40 |   const badImgUrl = 'http://media.giphy.com/media/EBJQRG6M99zSNhnhsW/giphy.gif';
      41 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 42 |   expect(res).toStrictEqual(400);
         |               ^
      43 | });
      44 |
      45 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:42:15)

  ● Test unsuccessful quiz thumnail change - invalid imgUrl, 404 not found

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      55 |   const badImgUrl = 'http://webcms3.cse.unsw.edu.au/static/uploads/coursepic/COMP1531/23T2/031145bd3ec1252213d78dc10cf897e5f779b358722a45f0a98eed7d0d5201b3/blah.png';
      56 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 57 |   expect(res).toStrictEqual(400);
         |               ^
      58 | });
      59 |
      60 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:57:15)

FAIL httpTests/adminAuth/adminAuthLogout.test.ts
  ● token is for a user who has already logged out

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      30 |   adminAuthLogout(token);
      31 |   const res = adminAuthLogout(token);
    > 32 |   expect(res).toStrictEqual(400);
         |               ^
      33 | });
      34 |
      35 | test('Cant perform action after logout', () => {

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogout.test.ts:32:15)


Test Suites: 11 failed, 24 passed, 35 total
Tests:       30 failed, 41 skipped, 240 passed, 311 total
Snapshots:   0 total
Time:        56.693 s, estimated 155 s
Ran all test suites matching /httpTests\//i.
npm notice 
npm notice New minor version of npm available! 9.5.1 -> 9.8.1
npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.8.1>
npm notice Run `npm install -g npm@9.8.1` to update!
npm notice 
